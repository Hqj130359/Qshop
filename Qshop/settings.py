"""
Django settings for Qshop project.

Generated by 'django-admin startproject' using Django 2.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ocmmyi0d5x^*#63uc@l)o46a%7=xa0pof5kkdcw2#y2i_&+w%b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Buyer',
    'Seller',
    'djcelery'
]

MIDDLEWARE = [
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'Qshop.middleware.MiddleWareTest',
    'django.middleware.cache.FetchFromCacheMiddleware'
]

ROOT_URLCONF = 'Qshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Qshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS=(
    os.path.join(BASE_DIR,'static'),
)

# STATIC_ROOT=os.path.join(BASE_DIR,'static')#静态文件的根目录，和STATICFILES_DIRS,MEDIA_URL.MEDIA_ROOT有冲突

MEDIA_URL='/media/'
MEDIA_ROOT=os.path.join(BASE_DIR,'static')



CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION':[
            '127.0.0.1:11211' #本地memcache的地址端口
        ]
    }
}
CACHE_MIDDLEWARE_KEY_PREFIX = ''
CACHE_MIDDLEWARE_SECONDS = 600
CACHE_MIDDLEWARE_ALIAS = 'default'


alipay_public_key_string="""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnvZYDgy4auN/L6OvdW0pHR31XykmmvAP/WzqBCtgEkTXBm/iDyBqLOIOj9gfF+yjiJQNtDQB727rr7yDaDgPo6mM9Vsmnej8gmUj44IDYjJRUP60X4HC6m83dyfHc/qlX6Z4rizQLYfBOKV/w9+pLvjNxUkbtl5fLgVU/RUthY1UdxYYGeNVBAkOur3FNKeUvm/MO0tGuWIqcoe/YZ9JbAkdWEhao9QAmI5KmkLD+wkLQXnLyOwzKI1wVsvZ8Qf1LdHC4iBHjGz98ni393rsdgix3XsXW6ZnJxSAp19+wsjonOx4CfRBAX2WOfEyAYWPOP8GVikypCQny2dmL7dxLQIDAQAB
-----END PUBLIC KEY-----"""


alipay_private_key_string="""-----BEGIN RSA PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCe9lgODLhq438vo691bSkdHfVfKSaa8A/9bOoEK2ASRNcGb+IPIGos4g6P2B8X7KOIlA20NAHvbuuvvINoOA+jqYz1Wyad6PyCZSPjggNiMlFQ/rRfgcLqbzd3J8dz+qVfpniuLNAth8E4pX/D36ku+M3FSRu2Xl8uBVT9FS2FjVR3FhgZ41UECQ66vcU0p5S+b8w7S0a5Yipyh79hn0lsCR1YSFqj1ACYjkqaQsP7CQtBecvI7DMojXBWy9nxB/Ut0cLiIEeMbP3yeLf3eux2CLHdexdbpmcnFICnX37CyOic7HgJ9EEBfZY58TIBhY84/wZWKTKkJCfLZ2Yvt3EtAgMBAAECggEAZYGW/vm+dXrqB4i1jP10yIQN4INNhJiRDVoUIS91fJT63cBqERC43ApKFC6ExGk2kAtCqPSg27zvwVtWaiGKUw781Nwsz58sRzPAdBHciULqTBcpJOeeiMcWGv+KzJOcMHUEEOzKzpgmmT6NVI2o4ja8ZyNlD9I5YxDCkY2JcQKp3e+5MnjYyyCyPR8hxK/VwJQyt5+NEPQCbX+/DZHhXdrLP/Org63zXbPvuTfhfnBK+EMTc8epZISIrSi8VdEgaYlUkdSe4CJmDQdGj9ZPcyAXHhxX1ci+vFuoDea8YnxfXGH5hPU/z/WJ4MlQRIgfIuVfZ+mxTJXU9glKGqvXnQKBgQDOfwR5Y4pocxUP3rBKl6bGaNp47BZ/BnOE9URmRGLcgcEngzlw8OLwjubTYIB0vkjXMVIa2bpRz8IzIpP6DXHcbePKPtLKySaKNdBEjcYIMtz0jOSM8HN8pMNZK9CAB7lM04H8JuR9ef6DJZUm/M6Qo90ARIcIvJamdV164Yai5wKBgQDFEhmjizCliHi8ujEG4Fs1uafHgE0qTj38DqgHOh2rHFTP26jDtwf+8TIUXsbczOFTX7J2WCpz8GdfxKlzPlz6i36G4YH05o01f2RWhUJn6i4hPqGTlnNFsq79cp9hoGpxuegexulXxeJFxWKKCZzCewvBUMmCJ/XUzOawbWUcywKBgDFA+sA5jfn7+Tof08z2/0C0IehV58fEsik0l2wNQ8d0662RD1JxIrBeZZBlpD40ZQtvKDZfWKHK/HdV+BXcvxvk2kCTW5QjBp5Q16yCZInwF+P890bm06UXZ8ENQl5HeVtp18ddP4LuZlbB0CHMizjU3RIDRnI/CXAK7pEw2fxhAoGBAKa3yE7uCwqPKK1oyt8pYKBT3tfM9/sJVDDv6UCr7rt6bVmnV9+y8SXBwP8wqwXSofEZrW2m6stInvuK8VuYb6pZ5oGPN5UKkn2mtyjm9aXZnIrtZF3qUrytDJNHrAQ4ZLSvdOrMlk12EBW8hb+HoEF7PRefE8pzqeoMKkEpWvf/AoGAHimx4XCveiklln4HsMMI1vBp6mu6tC9xZTwv4KL74At3CmHjPvx5fwjEbCZPgNnVIcIL45NoAnUj+icfKav/Ye279SXseJ19ZSs0LRW/mcSOm/mUpL6NZWmCl1B+BDGaIuoH32HgFUWKu1/Kxl1UFJ/p4t0vcphXNgcISw/6v68=
-----END RSA PRIVATE KEY-----"""


DING_URL = "https://oapi.dingtalk.com/robot/send?access_token=b665c6e977b4ded24d9ef54e2811c2a1e0d2159a0bfd5fd53068267a5287b740"

import djcelery  #导入django-celery模块
djcelery.setup_loader() #进行模块加载
BROKER_URL='redis://127.0.0.1:6379/1' #任务容器地址，redis数据库地址
CELERY_IMPORTS=('CeleryTask.tasks') #具体的任务文件
CELERY_TIMEZONE='Asia/Shanghai' #celery时区
CELERY_SCHEDULER='djcelery.schedulers.DatabaseScheduler'

from celery.schedules import crontab
from celery.schedules import timedelta
CELERYBEAT_SCHEDULE={
    u'测试任务1':{
        'task':'CeleryTask.tasks.sendDing', #任务函数
        'schedule':timedelta(seconds=5) #执行任务
    }
}
# Crontab
    # Crontab(hour=” * / 2”) 每2个小时执行一次
    # Crontab(minute=0, hour=” * / 2”) 每2个小时的0分执行一次
    # Crontab(minute=0, hour=” * / 2，8 - 12”) 每2个小时或者8点 - 12
    # 点执行一次
    # Crontab(minute=0, hour=0，day_of_month =”2 - 31 / 2”) 偶数天执行
    # Crontab(0，0，day_of_month =“1”，month_of_year =”5”) 每年的5月1号执行
#
# Timedelta
    # Timedelte(seconds=1) 每秒执行一次

ERROR_PATH=os.path.join(BASE_DIR,"error.log")

LOGGING={
    'version':1,
    'disable_existing_logger':False,
    'handlers':{
        'file':{
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename':os.path.join(BASE_DIR,'django.log')
        }
    },
    'loggers':{
        'django':{
            'handlers':['file'],
            'level':'DEBUG',
            'propagate':True
        }
    }
}
# ACCESS_PAT
